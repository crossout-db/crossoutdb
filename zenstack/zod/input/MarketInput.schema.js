"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarketInputSchema = void 0;
/* eslint-disable */
const zod_1 = require("zod");
;
const MarketSelect_schema_1 = require("../objects/MarketSelect.schema");
const MarketInclude_schema_1 = require("../objects/MarketInclude.schema");
const MarketWhereUniqueInput_schema_1 = require("../objects/MarketWhereUniqueInput.schema");
const MarketWhereInput_schema_1 = require("../objects/MarketWhereInput.schema");
const MarketOrderByWithRelationInput_schema_1 = require("../objects/MarketOrderByWithRelationInput.schema");
const MarketScalarFieldEnum_schema_1 = require("../enums/MarketScalarFieldEnum.schema");
const MarketCreateInput_schema_1 = require("../objects/MarketCreateInput.schema");
const MarketUncheckedCreateInput_schema_1 = require("../objects/MarketUncheckedCreateInput.schema");
const MarketCreateManyInput_schema_1 = require("../objects/MarketCreateManyInput.schema");
const MarketUpdateInput_schema_1 = require("../objects/MarketUpdateInput.schema");
const MarketUncheckedUpdateInput_schema_1 = require("../objects/MarketUncheckedUpdateInput.schema");
const MarketUpdateManyMutationInput_schema_1 = require("../objects/MarketUpdateManyMutationInput.schema");
const MarketUncheckedUpdateManyInput_schema_1 = require("../objects/MarketUncheckedUpdateManyInput.schema");
const MarketCountAggregateInput_schema_1 = require("../objects/MarketCountAggregateInput.schema");
const MarketMinAggregateInput_schema_1 = require("../objects/MarketMinAggregateInput.schema");
const MarketMaxAggregateInput_schema_1 = require("../objects/MarketMaxAggregateInput.schema");
const MarketAvgAggregateInput_schema_1 = require("../objects/MarketAvgAggregateInput.schema");
const MarketSumAggregateInput_schema_1 = require("../objects/MarketSumAggregateInput.schema");
const MarketOrderByWithAggregationInput_schema_1 = require("../objects/MarketOrderByWithAggregationInput.schema");
const MarketScalarWhereWithAggregatesInput_schema_1 = require("../objects/MarketScalarWhereWithAggregatesInput.schema");
exports.MarketInputSchema = {
    findUnique: zod_1.z.object({ select: zod_1.z.lazy(() => MarketSelect_schema_1.MarketSelectObjectSchema.optional()), include: zod_1.z.lazy(() => MarketInclude_schema_1.MarketIncludeObjectSchema.optional()), where: MarketWhereUniqueInput_schema_1.MarketWhereUniqueInputObjectSchema }), findFirst: zod_1.z.object({ select: zod_1.z.lazy(() => MarketSelect_schema_1.MarketSelectObjectSchema.optional()), include: zod_1.z.lazy(() => MarketInclude_schema_1.MarketIncludeObjectSchema.optional()), where: MarketWhereInput_schema_1.MarketWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([MarketOrderByWithRelationInput_schema_1.MarketOrderByWithRelationInputObjectSchema, MarketOrderByWithRelationInput_schema_1.MarketOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: MarketWhereUniqueInput_schema_1.MarketWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), distinct: zod_1.z.array(MarketScalarFieldEnum_schema_1.MarketScalarFieldEnumSchema).optional() }), findMany: zod_1.z.object({ select: zod_1.z.lazy(() => MarketSelect_schema_1.MarketSelectObjectSchema.optional()), include: zod_1.z.lazy(() => MarketInclude_schema_1.MarketIncludeObjectSchema.optional()), where: MarketWhereInput_schema_1.MarketWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([MarketOrderByWithRelationInput_schema_1.MarketOrderByWithRelationInputObjectSchema, MarketOrderByWithRelationInput_schema_1.MarketOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: MarketWhereUniqueInput_schema_1.MarketWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), distinct: zod_1.z.array(MarketScalarFieldEnum_schema_1.MarketScalarFieldEnumSchema).optional() }), create: zod_1.z.object({ select: zod_1.z.lazy(() => MarketSelect_schema_1.MarketSelectObjectSchema.optional()), include: zod_1.z.lazy(() => MarketInclude_schema_1.MarketIncludeObjectSchema.optional()), data: zod_1.z.union([MarketCreateInput_schema_1.MarketCreateInputObjectSchema, MarketUncheckedCreateInput_schema_1.MarketUncheckedCreateInputObjectSchema]) }), createMany: zod_1.z.object({ data: zod_1.z.union([MarketCreateManyInput_schema_1.MarketCreateManyInputObjectSchema, zod_1.z.array(MarketCreateManyInput_schema_1.MarketCreateManyInputObjectSchema)]) }), 'delete': zod_1.z.object({ select: zod_1.z.lazy(() => MarketSelect_schema_1.MarketSelectObjectSchema.optional()), include: zod_1.z.lazy(() => MarketInclude_schema_1.MarketIncludeObjectSchema.optional()), where: MarketWhereUniqueInput_schema_1.MarketWhereUniqueInputObjectSchema }), deleteMany: zod_1.z.object({ where: MarketWhereInput_schema_1.MarketWhereInputObjectSchema.optional() }), update: zod_1.z.object({ select: zod_1.z.lazy(() => MarketSelect_schema_1.MarketSelectObjectSchema.optional()), include: zod_1.z.lazy(() => MarketInclude_schema_1.MarketIncludeObjectSchema.optional()), data: zod_1.z.union([MarketUpdateInput_schema_1.MarketUpdateInputObjectSchema, MarketUncheckedUpdateInput_schema_1.MarketUncheckedUpdateInputObjectSchema]), where: MarketWhereUniqueInput_schema_1.MarketWhereUniqueInputObjectSchema }), updateMany: zod_1.z.object({ data: zod_1.z.union([MarketUpdateManyMutationInput_schema_1.MarketUpdateManyMutationInputObjectSchema, MarketUncheckedUpdateManyInput_schema_1.MarketUncheckedUpdateManyInputObjectSchema]), where: MarketWhereInput_schema_1.MarketWhereInputObjectSchema.optional() }), upsert: zod_1.z.object({ select: zod_1.z.lazy(() => MarketSelect_schema_1.MarketSelectObjectSchema.optional()), include: zod_1.z.lazy(() => MarketInclude_schema_1.MarketIncludeObjectSchema.optional()), where: MarketWhereUniqueInput_schema_1.MarketWhereUniqueInputObjectSchema, create: zod_1.z.union([MarketCreateInput_schema_1.MarketCreateInputObjectSchema, MarketUncheckedCreateInput_schema_1.MarketUncheckedCreateInputObjectSchema]), update: zod_1.z.union([MarketUpdateInput_schema_1.MarketUpdateInputObjectSchema, MarketUncheckedUpdateInput_schema_1.MarketUncheckedUpdateInputObjectSchema]) }), aggregate: zod_1.z.object({ where: MarketWhereInput_schema_1.MarketWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([MarketOrderByWithRelationInput_schema_1.MarketOrderByWithRelationInputObjectSchema, MarketOrderByWithRelationInput_schema_1.MarketOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: MarketWhereUniqueInput_schema_1.MarketWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), _count: zod_1.z.union([zod_1.z.literal(true), MarketCountAggregateInput_schema_1.MarketCountAggregateInputObjectSchema]).optional(), _min: MarketMinAggregateInput_schema_1.MarketMinAggregateInputObjectSchema.optional(), _max: MarketMaxAggregateInput_schema_1.MarketMaxAggregateInputObjectSchema.optional(), _avg: MarketAvgAggregateInput_schema_1.MarketAvgAggregateInputObjectSchema.optional(), _sum: MarketSumAggregateInput_schema_1.MarketSumAggregateInputObjectSchema.optional() }), groupBy: zod_1.z.object({ where: MarketWhereInput_schema_1.MarketWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([MarketOrderByWithAggregationInput_schema_1.MarketOrderByWithAggregationInputObjectSchema, MarketOrderByWithAggregationInput_schema_1.MarketOrderByWithAggregationInputObjectSchema.array()]).optional(), having: MarketScalarWhereWithAggregatesInput_schema_1.MarketScalarWhereWithAggregatesInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), by: zod_1.z.array(MarketScalarFieldEnum_schema_1.MarketScalarFieldEnumSchema), _count: zod_1.z.union([zod_1.z.literal(true), MarketCountAggregateInput_schema_1.MarketCountAggregateInputObjectSchema]).optional(), _min: MarketMinAggregateInput_schema_1.MarketMinAggregateInputObjectSchema.optional(), _max: MarketMaxAggregateInput_schema_1.MarketMaxAggregateInputObjectSchema.optional(), _avg: MarketAvgAggregateInput_schema_1.MarketAvgAggregateInputObjectSchema.optional(), _sum: MarketSumAggregateInput_schema_1.MarketSumAggregateInputObjectSchema.optional() }), count: zod_1.z.object({ where: MarketWhereInput_schema_1.MarketWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([MarketOrderByWithRelationInput_schema_1.MarketOrderByWithRelationInputObjectSchema, MarketOrderByWithRelationInput_schema_1.MarketOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: MarketWhereUniqueInput_schema_1.MarketWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), distinct: zod_1.z.array(MarketScalarFieldEnum_schema_1.MarketScalarFieldEnumSchema).optional(), select: zod_1.z.union([zod_1.z.literal(true), MarketCountAggregateInput_schema_1.MarketCountAggregateInputObjectSchema]).optional() })
};
