// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

plugin hooks {
    provider = '@zenstackhq/swr'
    output = "zenstack/generated/swr/hooks"
}

plugin trpc {
    provider = '@zenstackhq/trpc'
    output = 'zenstack/generated/trpc'
    generateClientHelpers = 'next'
}

model Example {
    id Int @id @default(autoincrement())
    name String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Release {
    id Int @id @default(autoincrement())
    name String
    xoVersion String?
    build String?
    description String?
    battlePass String?
    url String?
    startDate DateTime?
    endDate DateTime?
    active Boolean
    itemStats ItemStats[]
    recipes Recipe[]
    packs Pack[]

    // everyone
    @@allow('read', true)

    // only the ADMIN and CONTRIBUTOR
    @@allow('create,update', auth().role == "ADMIN" || auth().role == "CONTRIBUTOR")

    // only the ADMIN
    @@allow('delete', auth().role == "ADMIN")
}

model Recipe {
    id Int @id @default(autoincrement())
    result Item @relation(fields: [resultItemId], references: [id])
    resultItemId Int
    quantity Int
    release Release? @relation(fields: [releaseId], references: [id])
    releaseId Int?
    craftCost Float?
    timestamp DateTime? @default(now())
    active Boolean
    ingredients RecipeItem[]

    // everyone
    @@allow('read', true)

    // only the ADMIN and CONTRIBUTOR
    @@allow('create,update', auth().role == "ADMIN" || auth().role == "CONTRIBUTOR")

    // only the ADMIN
    @@allow('delete', auth().role == "ADMIN")
}

model RecipeItem {
    id Int @id @default(autoincrement())
    recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId Int
    item Item @relation(fields: [itemId], references: [id])
    itemId Int
    quantity Int

    // everyone
    @@allow('read', true)

    // only the ADMIN and CONTRIBUTOR
    @@allow('create,update,delete', auth().role == "ADMIN" || auth().role == "CONTRIBUTOR")
}

model Pack {
    id Int @id @default(autoincrement())
    name String
    description String?
    steamAppID Int
    key String?
    coins Int
    release Release? @relation(fields: [releaseId], references: [id])
    releaseId Int?
    active Boolean
    items PackItem[]
    packPrices PackPrice[]

    @@unique([steamAppID])

    // everyone
    @@allow('read', true)

    // only the ADMIN and CONTRIBUTOR
    @@allow('create,update', auth().role == "ADMIN" || auth().role == "CONTRIBUTOR")

    // only the ADMIN
    @@allow('delete', auth().role == "ADMIN")
}

model PackItem {
    id Int @id @default(autoincrement())
    pack Pack @relation(fields: [packId], references: [id], onDelete: Cascade)
    packId Int
    item Item @relation(fields: [itemId], references: [id])
    itemId Int
    quantity Int

    // everyone
    @@allow('read', true)

    // only the ADMIN and CONTRIBUTOR
    @@allow('create,update,delete', auth().role == "ADMIN" || auth().role == "CONTRIBUTOR")
}

model PackPrice {
    id Int @id @default(autoincrement())
    pack Pack @relation(fields: [packId], references: [id], onDelete: Cascade)
    packId Int
    timestamp DateTime @default(now())
    priceUSD Int
    priceEUR Int
    priceGBP Int
    priceRUB Int
    discount Int

    // everyone can read
    @@allow('read', true)
}

model Category {
    id Int @id @default(autoincrement())
    name String
    items Item[]

    // everyone
    @@allow('read', true)

    // only the ADMIN
    @@allow('create,update,delete', auth().role == "ADMIN")
}

model Faction {
    id Int @id @default(autoincrement())
    name String
    items Item[]

    // everyone
    @@allow('read', true)

    // only the ADMIN
    @@allow('create,update,delete', auth().role == "ADMIN")
}

model Type {
    id Int @id @default(autoincrement())
    name String
    items Item[]

    // everyone
    @@allow('read', true)

    // only the ADMIN
    @@allow('create,update,delete', auth().role == "ADMIN")
}

model Rarity {
    id Int @id @default(autoincrement())
    name String
    order Int
    primaryColor String
    secondaryColor String
    items Item[]

    // everyone
    @@allow('read', true)

    // only the ADMIN
    @@allow('create,update,delete', auth().role == "ADMIN")
}

model Item {
    id Int @id @default(autoincrement())
    name String
    marketDef String? @omit
    quantity Int
    type Type @relation(fields: [typeId], references: [id])
    typeId Int
    category Category @relation(fields: [categoryId], references: [id])
    categoryId Int
    faction Faction @relation(fields: [factionId], references: [id])
    factionId Int
    rarity Rarity @relation(fields: [rarityId], references: [id])
    rarityId Int
    level Int
    sellPriceMin Float?
    sellOrders Int?
    buyPriceMax Float?
    buyOrders Int?
    craftCost Float?
    timestamp DateTime? @default(now())
    active Boolean
    logId Int?

    itemStats ItemStats[]
    market Market[]
    badgeExchange BadgeExchange[]
    recipes Recipe[]
    recipeItems RecipeItem[]
    packItems PackItem[]
    itemSynergies SynergyItem[]

    // Define a unique constraint on itemId
    @@unique([marketDef])

    // everyone
    @@allow('read', true)

    // only the ADMIN
    @@allow('create,update,delete', auth().role == "ADMIN")
}

model ItemStats {
    id Int @id @default(autoincrement())
    item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId Int
    user User @relation(fields: [userId], references: [id])
    userId String
    release Release? @relation(fields: [releaseId], references: [id])
    releaseId Int?
    timestamp DateTime @default(now())
    description String?
    increasesDurability Int?
    increasesReputationPercent Int?
    topSpeed Int?
    ps Int?
    damage Float?
    fireRate Float?
    range Float?
    accuracy Float?
    timeToOverheating Float?
    maxAmmo Int?
    blastPower Float?
    addsEnergy Int?
    tonnage Int?
    massLimit Int?
    maxCabinSpeed Int?
    maxChassisSpeed Int?
    power Int?
    cabinPower Float?
    fuelReserves Int?
    featureBulletPercent Int?
    featureMeleePercent Int?
    featureBlastPercent Int?
    featureFirePercent Int?
    featurePassthroughPercent Int?
    durability Int?
    energyDrain Int?
    mass Int?
    perks String?

    // everyone
    @@allow('read', true)

    // only the ADMIN and CONTRIBUTOR
    @@allow('create,update', auth().role == "ADMIN" || auth().role == "CONTRIBUTOR")

    // only the ADMIN
    @@allow('delete', auth().role == "ADMIN")
}

model Synergy {
    id Int @id @default(autoincrement())
    name String
    synergyItems SynergyItem[]

    // everyone
    @@allow('read', true)

    // only the ADMIN and CONTRIBUTOR
    @@allow('create,update', auth().role == "ADMIN" || auth().role == "CONTRIBUTOR")

    // only the ADMIN
    @@allow('delete', auth().role == "ADMIN")
}

model SynergyItem {
    synergy Synergy @relation(fields: [synergyId], references: [id], onDelete: Cascade)
    synergyId Int
    item Item @relation(fields: [itemId], references: [id])
    itemId Int

    @@id([synergyId, itemId])

    // everyone
    @@allow('read', true)

    // only the ADMIN and CONTRIBUTOR
    @@allow('create,update, delete', auth().role == "ADMIN" || auth().role == "CONTRIBUTOR")
}

model Market {
    id Int @id @default(autoincrement())
    item Item @relation(fields: [itemId], references: [id])
    itemId Int
    marketDef String
    sellPriceMin Float
    sellOrders Int
    buyPriceMax Float
    buyOrders Int
    craftCost Float?
    timestamp DateTime @default(now())

    // everyone
    @@allow('read', true)
}

model BadgeExchange {
    id Int @id @default(autoincrement())
    item Item @relation(fields: [itemId], references: [id])
    itemId Int
    quantity Int
    badges Int
    active Boolean
    timestamp DateTime @default(now())

    // everyone
    @@allow('read', true)

    // only the ADMIN and CONTRIBUTOR
    @@allow('create,update', auth().role == "ADMIN" || auth().role == "CONTRIBUTOR")

    // only the ADMIN
    @@allow('delete', auth().role == "ADMIN")
}

model Log {
    id Int @id @default(autoincrement())
    timestamp DateTime @default(now())
    user User @relation(fields: [userId], references: [id])
    userId String
    tableChanged String
    recordId Int
    record Json

    // everyone
    @@allow('read', true)

    // only the ADMIN and CONTRIBUTOR
    @@allow('create,update', auth().role == "ADMIN" || auth().role == "CONTRIBUTOR")

    // only the ADMIN
    @@allow('delete', auth().role == "ADMIN")
}

// Necessary for Next auth
model Account {
    id String @id @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String? // @db.Text
    access_token String? // @db.Text
    expires_at Int?
    token_type String?
    scope String?
    id_token String? // @db.Text
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id @default(cuid())
    sessionToken String @unique
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    USER
    CONTRIBUTOR
    ADMIN
}

model User {
    id String @id @default(cuid())
    name String?
    role UserRole @default(USER)
    email String? @unique
    emailVerified DateTime?
    image String?
    accounts Account[]
    sessions Session[]
    itemStats ItemStats[]
    log Log[]

    // everyone can create a profile
    @@allow('create', true)

    // only the user can read or delete their own profile
    @@allow('read,delete', auth() == this || auth().role == "ADMIN")

    // only the ADMIN can update a profile
    @@allow('update', auth().role == "ADMIN")
}

model VerificationToken {
    identifier String
    token String @unique
    expires DateTime

    @@unique([identifier, token])
}
