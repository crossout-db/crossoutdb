//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    USER
    CONTRIBUTOR
    ADMIN
}

model Example {
    id Int @id() @default(autoincrement())
    name String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()

    @@index([name])
}

/// @@allow('read', true)
/// @@allow('create,update', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
/// @@allow('delete', auth().role == 'ADMIN')
model Release {
    id Int @id() @default(autoincrement())
    name String
    xoVersion String?
    build String?
    description String?
    battlePass String?
    url String?
    startDate DateTime?
    endDate DateTime?
    active Boolean
    itemStats ItemStats[]
    recipes Recipe[]
    packs Pack[]
}

/// @@allow('read', true)
/// @@allow('create,update', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
/// @@allow('delete', auth().role == 'ADMIN')
model Recipe {
    id Int @id() @default(autoincrement())
    result Item @relation(fields: [resultItemId], references: [id])
    resultItemId Int
    quantity Int
    release Release? @relation(fields: [releaseId], references: [id])
    releaseId Int?
    craftCost Float?
    timestamp DateTime? @default(now())
    active Boolean
    ingredients RecipeItem[]
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
model RecipeItem {
    id Int @id() @default(autoincrement())
    recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId Int
    item Item @relation(fields: [itemId], references: [id])
    itemId Int
    quantity Int
}

/// @@allow('read', true)
/// @@allow('create,update', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
/// @@allow('delete', auth().role == 'ADMIN')
model Pack {
    id Int @id() @default(autoincrement())
    name String
    description String?
    steamAppID Int
    key String?
    coins Int
    release Release? @relation(fields: [releaseId], references: [id])
    releaseId Int?
    active Boolean
    items PackItem[]
    packPrices PackPrice[]

    @@unique([steamAppID])
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
model PackItem {
    id Int @id() @default(autoincrement())
    pack Pack @relation(fields: [packId], references: [id], onDelete: Cascade)
    packId Int
    item Item @relation(fields: [itemId], references: [id])
    itemId Int
    quantity Int
}

/// @@allow('read', true)
model PackPrice {
    id Int @id() @default(autoincrement())
    pack Pack @relation(fields: [packId], references: [id], onDelete: Cascade)
    packId Int
    timestamp DateTime @default(now())
    priceUSD Int
    priceEUR Int
    priceGBP Int
    priceRUB Int
    discount Int
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN')
model Category {
    id Int @id() @default(autoincrement())
    name String
    items Item[]
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN')
model Faction {
    id Int @id() @default(autoincrement())
    name String
    items Item[]
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN')
model Type {
    id Int @id() @default(autoincrement())
    name String
    items Item[]
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN')
model Rarity {
    id Int @id() @default(autoincrement())
    name String
    order Int
    primaryColor String
    secondaryColor String
    items Item[]
}

/// @@allow('read', true)
/// @@allow('create,update,delete', auth().role == 'ADMIN')
model Item {
    id Int @id() @default(autoincrement())
    name String
    /// @omit
    marketDef String?
    quantity Int
    type Type @relation(fields: [typeId], references: [id])
    typeId Int
    category Category @relation(fields: [categoryId], references: [id])
    categoryId Int
    faction Faction @relation(fields: [factionId], references: [id])
    factionId Int
    rarity Rarity @relation(fields: [rarityId], references: [id])
    rarityId Int
    level Int
    sellPriceMin Float?
    sellOrders Int?
    buyPriceMax Float?
    buyOrders Int?
    craftCost Float?
    timestamp DateTime? @default(now())
    active Boolean
    logId Int?
    itemStats ItemStats[]
    market Market[]
    badgeExchange BadgeExchange[]
    recipes Recipe[]
    recipeItems RecipeItem[]
    packItems PackItem[]
    itemSynergies SynergyItem[]

    @@unique([marketDef])
}

/// @@allow('read', true)
/// @@allow('create,update', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
/// @@allow('delete', auth().role == 'ADMIN')
model ItemStats {
    id Int @id() @default(autoincrement())
    item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId Int
    user User @relation(fields: [userId], references: [id])
    userId String
    release Release? @relation(fields: [releaseId], references: [id])
    releaseId Int?
    timestamp DateTime @default(now())
    description String?
    increasesDurability Int?
    increasesReputationPercent Int?
    topSpeed Int?
    ps Int?
    damage Float?
    fireRate Float?
    range Float?
    accuracy Float?
    timeToOverheating Float?
    maxAmmo Int?
    blastPower Float?
    addsEnergy Int?
    tonnage Int?
    massLimit Int?
    maxCabinSpeed Int?
    maxChassisSpeed Int?
    power Int?
    cabinPower Float?
    fuelReserves Int?
    featureBulletPercent Int?
    featureMeleePercent Int?
    featureBlastPercent Int?
    featureFirePercent Int?
    featurePassthroughPercent Int?
    durability Int?
    energyDrain Int?
    mass Int?
    perks String?
}

/// @@allow('read', true)
/// @@allow('create,update', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
/// @@allow('delete', auth().role == 'ADMIN')
model Synergy {
    id Int @id() @default(autoincrement())
    name String
    synergyItems SynergyItem[]
}

/// @@allow('read', true)
/// @@allow('create,update, delete', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
model SynergyItem {
    synergy Synergy @relation(fields: [synergyId], references: [id], onDelete: Cascade)
    synergyId Int
    item Item @relation(fields: [itemId], references: [id])
    itemId Int

    @@id([synergyId, itemId])
}

/// @@allow('read', true)
model Market {
    id Int @id() @default(autoincrement())
    item Item @relation(fields: [itemId], references: [id])
    itemId Int
    marketDef String
    sellPriceMin Float
    sellOrders Int
    buyPriceMax Float
    buyOrders Int
    craftCost Float?
    timestamp DateTime @default(now())
}

/// @@allow('read', true)
/// @@allow('create,update', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
/// @@allow('delete', auth().role == 'ADMIN')
model BadgeExchange {
    id Int @id() @default(autoincrement())
    item Item @relation(fields: [itemId], references: [id])
    itemId Int
    quantity Int
    badges Int
    active Boolean
    timestamp DateTime @default(now())
}

/// @@allow('read', true)
/// @@allow('create,update', auth().role == 'ADMIN' || auth().role == 'CONTRIBUTOR')
/// @@allow('delete', auth().role == 'ADMIN')
model log {
    id Int @id() @default(autoincrement())
    timestamp DateTime @default(now())
    user User @relation(fields: [userId], references: [id])
    userId String
    tableChanged String
    recordId Int
    record Json
}

model Account {
    id String @id() @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('create', true)
/// @@allow('read,delete', auth() == this || auth().role == 'ADMIN')
/// @@allow('update', auth().role == 'ADMIN')
model User {
    id String @id() @default(cuid())
    name String?
    role UserRole @default(USER)
    email String? @unique()
    emailVerified DateTime?
    image String?
    accounts Account[]
    sessions Session[]
    itemStats ItemStats[]
    log log[]
}

model VerificationToken {
    identifier String
    token String @unique()
    expires DateTime

    @@unique([identifier, token])
}