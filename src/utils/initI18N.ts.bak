import i18next from "i18next";
import LanguageDetector from "i18next-browser-languagedetector";
import Backend, { type FsBackendOptions } from "i18next-fs-backend";
import path from "path";
import enCommon from "public/locales/en/common.json";
import deCommon from "public/locales/de/common.json";
import ruCommon from "public/locales/ru/common.json";
import zhCommon from "public/locales/zh/common.json";
import enModel from "public/locales/en/model.json";
import deModel from "public/locales/de/model.json";
import ruModel from "public/locales/ru/model.json";
import zhModel from "public/locales/zh/model.json";

const initI18N = async (locale?: string) => {
  return await i18next
    .use(LanguageDetector)
    .use(Backend)
    .init<FsBackendOptions>({
      debug: true,
      fallbackLng: "en",
      lng: locale ?? "en",
      ns: ["common", "model"],
      // resources: {
      //   en: {
      //     common: enCommon,
      //     model: enModel,
      //   },
      //   de: {
      //     common: deCommon,
      //     model: deModel,
      //   },
      //   ru: {
      //     common: ruCommon,
      //     model: ruModel,
      //   },
      //   zh: {
      //     common: zhCommon,
      //     model: zhModel,
      //   },
      // },
      interpolation: {
        escapeValue: false, // not needed for react as it escapes by default
      },
      backend: {
        loadPath: path.join(
          process.cwd(),
          "/public/locales/{{lng}}/{{ns}}.json",
        ),
      },
    });
};

export default initI18N;
