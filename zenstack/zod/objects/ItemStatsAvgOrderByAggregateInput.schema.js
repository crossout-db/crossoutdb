"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemStatsAvgOrderByAggregateInputObjectSchema = void 0;
/* eslint-disable */
const zod_1 = require("zod");
const SortOrder_schema_1 = require("../enums/SortOrder.schema");
exports.ItemStatsAvgOrderByAggregateInputObjectSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), itemId: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), releaseId: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), increasesDurability: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), increasesReputationPercent: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), topSpeed: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), ps: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), damage: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), fireRate: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), range: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), accuracy: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), timeToOverheating: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), maxAmmo: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), blastPower: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), addsEnergy: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), tonnage: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), massLimit: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), maxCabinSpeed: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), maxChassisSpeed: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), power: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), cabinPower: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), fuelReserves: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), featureBulletPercent: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), featureMeleePercent: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), featureBlastPercent: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), featureFirePercent: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), featurePassthroughPercent: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), durability: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), energyDrain: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), mass: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional()
}).strict();
