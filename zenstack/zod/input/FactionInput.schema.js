"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FactionInputSchema = void 0;
/* eslint-disable */
const zod_1 = require("zod");
;
const FactionSelect_schema_1 = require("../objects/FactionSelect.schema");
const FactionInclude_schema_1 = require("../objects/FactionInclude.schema");
const FactionWhereUniqueInput_schema_1 = require("../objects/FactionWhereUniqueInput.schema");
const FactionWhereInput_schema_1 = require("../objects/FactionWhereInput.schema");
const FactionOrderByWithRelationInput_schema_1 = require("../objects/FactionOrderByWithRelationInput.schema");
const FactionScalarFieldEnum_schema_1 = require("../enums/FactionScalarFieldEnum.schema");
const FactionCreateInput_schema_1 = require("../objects/FactionCreateInput.schema");
const FactionUncheckedCreateInput_schema_1 = require("../objects/FactionUncheckedCreateInput.schema");
const FactionCreateManyInput_schema_1 = require("../objects/FactionCreateManyInput.schema");
const FactionUpdateInput_schema_1 = require("../objects/FactionUpdateInput.schema");
const FactionUncheckedUpdateInput_schema_1 = require("../objects/FactionUncheckedUpdateInput.schema");
const FactionUpdateManyMutationInput_schema_1 = require("../objects/FactionUpdateManyMutationInput.schema");
const FactionUncheckedUpdateManyInput_schema_1 = require("../objects/FactionUncheckedUpdateManyInput.schema");
const FactionCountAggregateInput_schema_1 = require("../objects/FactionCountAggregateInput.schema");
const FactionMinAggregateInput_schema_1 = require("../objects/FactionMinAggregateInput.schema");
const FactionMaxAggregateInput_schema_1 = require("../objects/FactionMaxAggregateInput.schema");
const FactionAvgAggregateInput_schema_1 = require("../objects/FactionAvgAggregateInput.schema");
const FactionSumAggregateInput_schema_1 = require("../objects/FactionSumAggregateInput.schema");
const FactionOrderByWithAggregationInput_schema_1 = require("../objects/FactionOrderByWithAggregationInput.schema");
const FactionScalarWhereWithAggregatesInput_schema_1 = require("../objects/FactionScalarWhereWithAggregatesInput.schema");
exports.FactionInputSchema = {
    findUnique: zod_1.z.object({ select: zod_1.z.lazy(() => FactionSelect_schema_1.FactionSelectObjectSchema.optional()), include: zod_1.z.lazy(() => FactionInclude_schema_1.FactionIncludeObjectSchema.optional()), where: FactionWhereUniqueInput_schema_1.FactionWhereUniqueInputObjectSchema }), findFirst: zod_1.z.object({ select: zod_1.z.lazy(() => FactionSelect_schema_1.FactionSelectObjectSchema.optional()), include: zod_1.z.lazy(() => FactionInclude_schema_1.FactionIncludeObjectSchema.optional()), where: FactionWhereInput_schema_1.FactionWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([FactionOrderByWithRelationInput_schema_1.FactionOrderByWithRelationInputObjectSchema, FactionOrderByWithRelationInput_schema_1.FactionOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: FactionWhereUniqueInput_schema_1.FactionWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), distinct: zod_1.z.array(FactionScalarFieldEnum_schema_1.FactionScalarFieldEnumSchema).optional() }), findMany: zod_1.z.object({ select: zod_1.z.lazy(() => FactionSelect_schema_1.FactionSelectObjectSchema.optional()), include: zod_1.z.lazy(() => FactionInclude_schema_1.FactionIncludeObjectSchema.optional()), where: FactionWhereInput_schema_1.FactionWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([FactionOrderByWithRelationInput_schema_1.FactionOrderByWithRelationInputObjectSchema, FactionOrderByWithRelationInput_schema_1.FactionOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: FactionWhereUniqueInput_schema_1.FactionWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), distinct: zod_1.z.array(FactionScalarFieldEnum_schema_1.FactionScalarFieldEnumSchema).optional() }), create: zod_1.z.object({ select: zod_1.z.lazy(() => FactionSelect_schema_1.FactionSelectObjectSchema.optional()), include: zod_1.z.lazy(() => FactionInclude_schema_1.FactionIncludeObjectSchema.optional()), data: zod_1.z.union([FactionCreateInput_schema_1.FactionCreateInputObjectSchema, FactionUncheckedCreateInput_schema_1.FactionUncheckedCreateInputObjectSchema]) }), createMany: zod_1.z.object({ data: zod_1.z.union([FactionCreateManyInput_schema_1.FactionCreateManyInputObjectSchema, zod_1.z.array(FactionCreateManyInput_schema_1.FactionCreateManyInputObjectSchema)]) }), 'delete': zod_1.z.object({ select: zod_1.z.lazy(() => FactionSelect_schema_1.FactionSelectObjectSchema.optional()), include: zod_1.z.lazy(() => FactionInclude_schema_1.FactionIncludeObjectSchema.optional()), where: FactionWhereUniqueInput_schema_1.FactionWhereUniqueInputObjectSchema }), deleteMany: zod_1.z.object({ where: FactionWhereInput_schema_1.FactionWhereInputObjectSchema.optional() }), update: zod_1.z.object({ select: zod_1.z.lazy(() => FactionSelect_schema_1.FactionSelectObjectSchema.optional()), include: zod_1.z.lazy(() => FactionInclude_schema_1.FactionIncludeObjectSchema.optional()), data: zod_1.z.union([FactionUpdateInput_schema_1.FactionUpdateInputObjectSchema, FactionUncheckedUpdateInput_schema_1.FactionUncheckedUpdateInputObjectSchema]), where: FactionWhereUniqueInput_schema_1.FactionWhereUniqueInputObjectSchema }), updateMany: zod_1.z.object({ data: zod_1.z.union([FactionUpdateManyMutationInput_schema_1.FactionUpdateManyMutationInputObjectSchema, FactionUncheckedUpdateManyInput_schema_1.FactionUncheckedUpdateManyInputObjectSchema]), where: FactionWhereInput_schema_1.FactionWhereInputObjectSchema.optional() }), upsert: zod_1.z.object({ select: zod_1.z.lazy(() => FactionSelect_schema_1.FactionSelectObjectSchema.optional()), include: zod_1.z.lazy(() => FactionInclude_schema_1.FactionIncludeObjectSchema.optional()), where: FactionWhereUniqueInput_schema_1.FactionWhereUniqueInputObjectSchema, create: zod_1.z.union([FactionCreateInput_schema_1.FactionCreateInputObjectSchema, FactionUncheckedCreateInput_schema_1.FactionUncheckedCreateInputObjectSchema]), update: zod_1.z.union([FactionUpdateInput_schema_1.FactionUpdateInputObjectSchema, FactionUncheckedUpdateInput_schema_1.FactionUncheckedUpdateInputObjectSchema]) }), aggregate: zod_1.z.object({ where: FactionWhereInput_schema_1.FactionWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([FactionOrderByWithRelationInput_schema_1.FactionOrderByWithRelationInputObjectSchema, FactionOrderByWithRelationInput_schema_1.FactionOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: FactionWhereUniqueInput_schema_1.FactionWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), _count: zod_1.z.union([zod_1.z.literal(true), FactionCountAggregateInput_schema_1.FactionCountAggregateInputObjectSchema]).optional(), _min: FactionMinAggregateInput_schema_1.FactionMinAggregateInputObjectSchema.optional(), _max: FactionMaxAggregateInput_schema_1.FactionMaxAggregateInputObjectSchema.optional(), _avg: FactionAvgAggregateInput_schema_1.FactionAvgAggregateInputObjectSchema.optional(), _sum: FactionSumAggregateInput_schema_1.FactionSumAggregateInputObjectSchema.optional() }), groupBy: zod_1.z.object({ where: FactionWhereInput_schema_1.FactionWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([FactionOrderByWithAggregationInput_schema_1.FactionOrderByWithAggregationInputObjectSchema, FactionOrderByWithAggregationInput_schema_1.FactionOrderByWithAggregationInputObjectSchema.array()]).optional(), having: FactionScalarWhereWithAggregatesInput_schema_1.FactionScalarWhereWithAggregatesInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), by: zod_1.z.array(FactionScalarFieldEnum_schema_1.FactionScalarFieldEnumSchema), _count: zod_1.z.union([zod_1.z.literal(true), FactionCountAggregateInput_schema_1.FactionCountAggregateInputObjectSchema]).optional(), _min: FactionMinAggregateInput_schema_1.FactionMinAggregateInputObjectSchema.optional(), _max: FactionMaxAggregateInput_schema_1.FactionMaxAggregateInputObjectSchema.optional(), _avg: FactionAvgAggregateInput_schema_1.FactionAvgAggregateInputObjectSchema.optional(), _sum: FactionSumAggregateInput_schema_1.FactionSumAggregateInputObjectSchema.optional() }), count: zod_1.z.object({ where: FactionWhereInput_schema_1.FactionWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([FactionOrderByWithRelationInput_schema_1.FactionOrderByWithRelationInputObjectSchema, FactionOrderByWithRelationInput_schema_1.FactionOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: FactionWhereUniqueInput_schema_1.FactionWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), distinct: zod_1.z.array(FactionScalarFieldEnum_schema_1.FactionScalarFieldEnumSchema).optional(), select: zod_1.z.union([zod_1.z.literal(true), FactionCountAggregateInput_schema_1.FactionCountAggregateInputObjectSchema]).optional() })
};
