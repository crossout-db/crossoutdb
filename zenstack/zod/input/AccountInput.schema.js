"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountInputSchema = void 0;
/* eslint-disable */
const zod_1 = require("zod");
;
const AccountSelect_schema_1 = require("../objects/AccountSelect.schema");
const AccountInclude_schema_1 = require("../objects/AccountInclude.schema");
const AccountWhereUniqueInput_schema_1 = require("../objects/AccountWhereUniqueInput.schema");
const AccountWhereInput_schema_1 = require("../objects/AccountWhereInput.schema");
const AccountOrderByWithRelationInput_schema_1 = require("../objects/AccountOrderByWithRelationInput.schema");
const AccountScalarFieldEnum_schema_1 = require("../enums/AccountScalarFieldEnum.schema");
const AccountCreateInput_schema_1 = require("../objects/AccountCreateInput.schema");
const AccountUncheckedCreateInput_schema_1 = require("../objects/AccountUncheckedCreateInput.schema");
const AccountCreateManyInput_schema_1 = require("../objects/AccountCreateManyInput.schema");
const AccountUpdateInput_schema_1 = require("../objects/AccountUpdateInput.schema");
const AccountUncheckedUpdateInput_schema_1 = require("../objects/AccountUncheckedUpdateInput.schema");
const AccountUpdateManyMutationInput_schema_1 = require("../objects/AccountUpdateManyMutationInput.schema");
const AccountUncheckedUpdateManyInput_schema_1 = require("../objects/AccountUncheckedUpdateManyInput.schema");
const AccountCountAggregateInput_schema_1 = require("../objects/AccountCountAggregateInput.schema");
const AccountMinAggregateInput_schema_1 = require("../objects/AccountMinAggregateInput.schema");
const AccountMaxAggregateInput_schema_1 = require("../objects/AccountMaxAggregateInput.schema");
const AccountAvgAggregateInput_schema_1 = require("../objects/AccountAvgAggregateInput.schema");
const AccountSumAggregateInput_schema_1 = require("../objects/AccountSumAggregateInput.schema");
const AccountOrderByWithAggregationInput_schema_1 = require("../objects/AccountOrderByWithAggregationInput.schema");
const AccountScalarWhereWithAggregatesInput_schema_1 = require("../objects/AccountScalarWhereWithAggregatesInput.schema");
exports.AccountInputSchema = {
    findUnique: zod_1.z.object({ select: zod_1.z.lazy(() => AccountSelect_schema_1.AccountSelectObjectSchema.optional()), include: zod_1.z.lazy(() => AccountInclude_schema_1.AccountIncludeObjectSchema.optional()), where: AccountWhereUniqueInput_schema_1.AccountWhereUniqueInputObjectSchema }), findFirst: zod_1.z.object({ select: zod_1.z.lazy(() => AccountSelect_schema_1.AccountSelectObjectSchema.optional()), include: zod_1.z.lazy(() => AccountInclude_schema_1.AccountIncludeObjectSchema.optional()), where: AccountWhereInput_schema_1.AccountWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([AccountOrderByWithRelationInput_schema_1.AccountOrderByWithRelationInputObjectSchema, AccountOrderByWithRelationInput_schema_1.AccountOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AccountWhereUniqueInput_schema_1.AccountWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), distinct: zod_1.z.array(AccountScalarFieldEnum_schema_1.AccountScalarFieldEnumSchema).optional() }), findMany: zod_1.z.object({ select: zod_1.z.lazy(() => AccountSelect_schema_1.AccountSelectObjectSchema.optional()), include: zod_1.z.lazy(() => AccountInclude_schema_1.AccountIncludeObjectSchema.optional()), where: AccountWhereInput_schema_1.AccountWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([AccountOrderByWithRelationInput_schema_1.AccountOrderByWithRelationInputObjectSchema, AccountOrderByWithRelationInput_schema_1.AccountOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AccountWhereUniqueInput_schema_1.AccountWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), distinct: zod_1.z.array(AccountScalarFieldEnum_schema_1.AccountScalarFieldEnumSchema).optional() }), create: zod_1.z.object({ select: zod_1.z.lazy(() => AccountSelect_schema_1.AccountSelectObjectSchema.optional()), include: zod_1.z.lazy(() => AccountInclude_schema_1.AccountIncludeObjectSchema.optional()), data: zod_1.z.union([AccountCreateInput_schema_1.AccountCreateInputObjectSchema, AccountUncheckedCreateInput_schema_1.AccountUncheckedCreateInputObjectSchema]) }), createMany: zod_1.z.object({ data: zod_1.z.union([AccountCreateManyInput_schema_1.AccountCreateManyInputObjectSchema, zod_1.z.array(AccountCreateManyInput_schema_1.AccountCreateManyInputObjectSchema)]) }), 'delete': zod_1.z.object({ select: zod_1.z.lazy(() => AccountSelect_schema_1.AccountSelectObjectSchema.optional()), include: zod_1.z.lazy(() => AccountInclude_schema_1.AccountIncludeObjectSchema.optional()), where: AccountWhereUniqueInput_schema_1.AccountWhereUniqueInputObjectSchema }), deleteMany: zod_1.z.object({ where: AccountWhereInput_schema_1.AccountWhereInputObjectSchema.optional() }), update: zod_1.z.object({ select: zod_1.z.lazy(() => AccountSelect_schema_1.AccountSelectObjectSchema.optional()), include: zod_1.z.lazy(() => AccountInclude_schema_1.AccountIncludeObjectSchema.optional()), data: zod_1.z.union([AccountUpdateInput_schema_1.AccountUpdateInputObjectSchema, AccountUncheckedUpdateInput_schema_1.AccountUncheckedUpdateInputObjectSchema]), where: AccountWhereUniqueInput_schema_1.AccountWhereUniqueInputObjectSchema }), updateMany: zod_1.z.object({ data: zod_1.z.union([AccountUpdateManyMutationInput_schema_1.AccountUpdateManyMutationInputObjectSchema, AccountUncheckedUpdateManyInput_schema_1.AccountUncheckedUpdateManyInputObjectSchema]), where: AccountWhereInput_schema_1.AccountWhereInputObjectSchema.optional() }), upsert: zod_1.z.object({ select: zod_1.z.lazy(() => AccountSelect_schema_1.AccountSelectObjectSchema.optional()), include: zod_1.z.lazy(() => AccountInclude_schema_1.AccountIncludeObjectSchema.optional()), where: AccountWhereUniqueInput_schema_1.AccountWhereUniqueInputObjectSchema, create: zod_1.z.union([AccountCreateInput_schema_1.AccountCreateInputObjectSchema, AccountUncheckedCreateInput_schema_1.AccountUncheckedCreateInputObjectSchema]), update: zod_1.z.union([AccountUpdateInput_schema_1.AccountUpdateInputObjectSchema, AccountUncheckedUpdateInput_schema_1.AccountUncheckedUpdateInputObjectSchema]) }), aggregate: zod_1.z.object({ where: AccountWhereInput_schema_1.AccountWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([AccountOrderByWithRelationInput_schema_1.AccountOrderByWithRelationInputObjectSchema, AccountOrderByWithRelationInput_schema_1.AccountOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AccountWhereUniqueInput_schema_1.AccountWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), _count: zod_1.z.union([zod_1.z.literal(true), AccountCountAggregateInput_schema_1.AccountCountAggregateInputObjectSchema]).optional(), _min: AccountMinAggregateInput_schema_1.AccountMinAggregateInputObjectSchema.optional(), _max: AccountMaxAggregateInput_schema_1.AccountMaxAggregateInputObjectSchema.optional(), _avg: AccountAvgAggregateInput_schema_1.AccountAvgAggregateInputObjectSchema.optional(), _sum: AccountSumAggregateInput_schema_1.AccountSumAggregateInputObjectSchema.optional() }), groupBy: zod_1.z.object({ where: AccountWhereInput_schema_1.AccountWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([AccountOrderByWithAggregationInput_schema_1.AccountOrderByWithAggregationInputObjectSchema, AccountOrderByWithAggregationInput_schema_1.AccountOrderByWithAggregationInputObjectSchema.array()]).optional(), having: AccountScalarWhereWithAggregatesInput_schema_1.AccountScalarWhereWithAggregatesInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), by: zod_1.z.array(AccountScalarFieldEnum_schema_1.AccountScalarFieldEnumSchema), _count: zod_1.z.union([zod_1.z.literal(true), AccountCountAggregateInput_schema_1.AccountCountAggregateInputObjectSchema]).optional(), _min: AccountMinAggregateInput_schema_1.AccountMinAggregateInputObjectSchema.optional(), _max: AccountMaxAggregateInput_schema_1.AccountMaxAggregateInputObjectSchema.optional(), _avg: AccountAvgAggregateInput_schema_1.AccountAvgAggregateInputObjectSchema.optional(), _sum: AccountSumAggregateInput_schema_1.AccountSumAggregateInputObjectSchema.optional() }), count: zod_1.z.object({ where: AccountWhereInput_schema_1.AccountWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([AccountOrderByWithRelationInput_schema_1.AccountOrderByWithRelationInputObjectSchema, AccountOrderByWithRelationInput_schema_1.AccountOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AccountWhereUniqueInput_schema_1.AccountWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), distinct: zod_1.z.array(AccountScalarFieldEnum_schema_1.AccountScalarFieldEnumSchema).optional(), select: zod_1.z.union([zod_1.z.literal(true), AccountCountAggregateInput_schema_1.AccountCountAggregateInputObjectSchema]).optional() })
};
